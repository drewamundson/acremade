{%- assign video_grid_width = 'lg--up--one-whole' -%}
<section class="section-with-padding color--tertiary-text bg--tertiary-background">
  <div class="max-site-width lg--up--px3">

    <div class="grid">
      <div class="grid__item lg--up--one-whole">
        <div class="pb2 pl2 pr2 lg--up--px0 lg--up--pb3 lg--up--pr4">
          {% if section.settings.title != blank %}
            <h2 class="m0 font-size__heading-mobile-full">
              {{ section.settings.title }}
            </h2>
          {% endif %}
          {% if section.settings.subheading != blank %}
            <h3 class="m0 mt2">
              {{ section.settings.subheading }}
            </h3>
          {% endif %}
        </div>
        <div class="mt2 mb2 pl2 pr2 lg--up--mb3 lg--up--px0 lg--up--pr4 flex flex--wrap" id="video-buttons">
          {% for block in section.blocks %}
            {% if block.settings.video_title != blank %}
              <button class='VideoButton mr2 mb2 inline-block p0 {% if forloop.first %}Active{% endif %} color--tertiary-text' data-video="{{forloop.index | minus: 1 }}">{{ block.settings.video_title }}</button>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>

    <div class="grid">
      <div class="Slick" data-slick='{
        "slidesToShow": 1,
        "slidesToScroll": 1,
        "dots": false,
        "arrows": false,
        "infinite": false,
        "fade": true,
        "responsive": [
          {
            "breakpoint": 782,
            "settings": {
            }
          }
        ]		
      }'>
        {% for block in section.blocks %}
          <div id="video-{{forloop.index}}" class="grid__item {{ video_grid_width }} video-toggle {% if forloop.first %}Show{% endif %}">
            <div class="px2 lg--up--px0">
              {% if block.settings.video_url %}
                <div class="rte__video-wrapper">
                  {% if block.settings.video_url.type == 'youtube' %}
                    <iframe width="560" height="315" src="//www.youtube.com/embed/{{ block.settings.video_url.id }}?rel=0&amp;controls=0&amp;showinfo=0" title="{{ 'general.accessibility.media.embedded_video_title' | t }}" frameborder="0" allowfullscreen></iframe>
                  {% endif %}
                  {% if block.settings.video_url.type == 'vimeo' %}
                    <iframe src="//player.vimeo.com/video/{{ block.settings.video_url.id }}?color=00ff00" title="{{ 'general.accessibility.media.embedded_video_title' | t }}" width="500" height="232" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
                  {% endif %}
                {% else %}
                  <iframe width="560" height="315" src="//www.youtube.com/embed/_9VUPq3SxOc?rel=0&amp;controls=0&amp;showinfo=0" title="{{ 'general.accessibility.media.embedded_video_title' | t }}" frameborder="0" allowfullscreen></iframe>
                {% endif %}
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    </div>
    
  </div>
</section>

{% schema %}
{
  "name": "Video Module",
  "class": "section-video-module section-video",
  "max_blocks": 6,
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title"
    },
    {
      "id": "subheading",
      "type": "text",
      "label": "Sub-heading"
    }
  ],
  "blocks": [
    {
      "type": "video",
      "name": "Video", 
      "settings": [
        {
          "id": "video_title",
          "type": "text",
          "label": "Video Title"
        },
        {
          "id": "video_url",
          "type": "video_url",
          "label": "Video link",
          "accept": ["youtube", "vimeo"],
          "info": "Accepts URLs from YouTube or Vimeo",
          "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc"
        },
        {
          "type": "checkbox",
          "id": "use_high_res_image",
          "label": "Use high resolution image",
          "info": "Not all YouTube videos have high resolution images, disable this to use default image size.",
          "default": true
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Video gallery",
      "category": "Video",
      "blocks": [
        {
          "type": "video"
        }
      ]
    }
  ]
}
{% endschema %}

{% javascript %}
  $('.Slick').slick();
  var $vidBtns = $('.VideoButton'),
      $vids = $('.video-toggle');
  
  $vidBtns.on('click', function(el){
    var $me = $(this),
        meVid = $me.attr('data-video');
  
    if(!$me.hasClass('Active')){
      $me.addClass('Active').siblings('').removeClass('Active');
      $('.Slick').slick('slickGoTo', meVid);
    }
  });

  $('.Slick').on('afterChange', function(){
    $('.slick-slide').not('.slick-current').find('iframe').attr('src', $('iframe').attr('src'));
  });

{% endjavascript %}

{% stylesheet %}
  #video-buttons button {
    appearance: none;
    background: transparent;
    border: none;
    outline: none;
    font-family: var(--heading-font-stack);
    font-weight: var(--heading-font-weight);
    font-style: var(--heading-font-style);
    border-bottom: 2px solid transparent;
  }

  #video-buttons button.Active {
    border-bottom-color: black;
  }

  .video-toggle {

  }


{% endstylesheet %}